<style>
	.portfolio-item {
		margin-bottom: 1.75rem;
		margin-top: 2rem;
		padding-bottom: 1.75rem;
		border-bottom: 1px dashed var(--tertiary-color);
	}

	.portfolio :last-child {
		border-bottom: none;
	}

	.portfolio-item figure {
		padding: .5rem .5rem .3rem .5rem;
		background-color: var(--tertiary-color);
		border-radius: 4px;
	}

	@media (prefers-color-scheme: light) {
		.portfolio-item figure {
			background-color: var(--secondary-back-color);
		}
	}

	@media (min-width: 45rem) {
		.portfolio-item {
			display: flex;
			align-items: center;
			margin-bottom: 1.25rem;
		}

		.portfolio-title {
			margin-top: 0;
		}

		.portfolio-image {
			max-width: 15rem;
		}

		.portfolio-details {
			margin-left: 1rem;
		}
	}

	.portfolio-title {
		margin-bottom: 0;
	}

	.portfolio-description {
		margin-top: .75rem;
	}

	.portfolio-image {
		border-radius: 4px;
	}

	.portfolio-specs {
		font-size: .75rem;
		color: var(--tertiary-color);
	}

	.portfolio-specs span {
		color: var(--secondary-color);
	}
</style>
<section id="portfolio" class="portfolio">
	<div class="section-header">
		<h2>Portfolio</h2>
		<back-to-top />
	</div>
	<article class="portfolio-item">
		<figure>
			<img class="portfolio-image" src="img/todo.webp"
				alt="A screenshot of a web application showing a list titled groceries, a form input, and a list of interactive grocery items"
				loading="lazy" height="500" width="500" />
		</figure>
		<div class="portfolio-details">
			<h3 class="portfolio-title">Todo List Manager</h3>
			<p class="portfolio-description">
				This simple todo app is built with React allows users to create multiple todo lists,
				add, remove, edit, sort and delete todo items. It features keyboard and screen reader
				support, and includes automated testing for functionality.
			</p>
			<a href="https://storied-caramel-d5710b.netlify.app/" class="no-print">Try it out</a>
			<p class="portfolio-specs">
				<span>Built with: </span>
				React, TypeScript, Jest, Tailwind, Netlify
			</p>
		</div>
	</article>
	<article class="portfolio-item">
		<figure>
			<img class="portfolio-image" src="img/raas.webp"
				alt="a screenshot of website showing a search field, recipe category buttons, and a list of recipe photos and titles."
				loading="lazy" height="500" width="500" />
		</figure>
		<div class="portfolio-details">
			<h3 class="portfolio-title">Recipe as a Service</h3>
			<p class="portfolio-description">
				This embedded JavaScript application built using Mithril and
				Foundation for the UI layer and the leverages the Scala Play
				framework for REST services and client configuration. It is a
				single page application complete with versioning, automated UI
				tests, analytics and monitoring.
			</p>
			<a class="no-print" href="https://us.keepitpumping.com/heart-healthy-recipes#/">Try it out</a>
			<p class="portfolio-specs">
				<span>Built with: </span>
				Mithril.js, Sass, Foundation, ES6, Scala Play, Elasticsearch
			</p>
		</div>
	</article>
	<article class="portfolio-item">
		<figure>
			<img class="portfolio-image" src="img/rei-siv.webp"
				alt="photo of a website with a dialog showing a tent, and a list of REI store locations" loading="lazy"
				height="500" width="500" />
		</figure>
		<div class="portfolio-details">
			<h3 class="portfolio-title">REI Store Inventory Visibility</h3>
			<p class="portfolio-description">
				This feature leveraged geo-location, product data services, and
				store inventory services to help the customer find a store with
				the products they need. I was responsible for creating the UI,
				binding all data, and building interactions using KnockoutJS.
			</p>
			<p class="portfolio-specs">
				<span>Built with: </span>
				HTML, CSS, JavaScript, KnockoutJS, JSTL, Adobe CQ5
			</p>
		</div>
	</article>
</section>